											Networks Lab Assignment 5
											Team: 	Swarup Padhi (20CS30062)
													Rounak Saha  (20CS30043)
										   ==================================

MACROS:
	1.		Name:	      MAX_MSG_LEN
			Definition:	  #define MAX_MSG_LEN 5000
			Description:  Maximum length in bytes of the message that can be sent.
	
	2.		Name:	      MAX_MSG_DIGITS
			Definition:	  #define MAX_MSG_DIGITS 4
			Description:  Maximum number of digits in the length of the message. [ 4 digits for max 5000 bytes and 1 byte for null character]
	
	3.      Name:         SOCK_MyTCP
			Definition:   #define SOCK_MyTCP 12
			Description:  Socket type for MyTCP protocol.
	
	4.      Name:         SEND_BUF_SZ
			Definition:   #define SEND_BUF_SZ 1000
			Description:  Size of the send buffer. [ in one send call ]
	
	5.      Name:         RECV_BUF_SZ
			Definition:   #define RECV_BUF_SZ 50
			Description:  Size of the receive buffer. [ in one recv call ]
	
	6.      Name:         TABLE_SZ
			Definition:   #define TABLE_SZ 10
			Description:  Maximum size of the Send_Message_Table and the Receive_Message_Table.
	
GLOBAL VARIABLES:
	1.		Name:	      Send_Message_Table
			Definition:	  Table* Send_Message_Table;
	
	2.		Name:         Received_Message_Table
			Definition:	  Table* Receive_Message_Table;

	3.		Name:         send_buf
			Definition:	  char *send_buf;
			Description:  A Dynamic character array to store the message to be sent in on send call.

	4.		Name:         recv_buf
			Definition:	  char *recv_buf;
			Description:  A Dynamic character array to store the message received in on recv call.

	5.		Name:         accept_cnt
			Definition:	  int accept_cnt;
			Description:  A counter to count the number of accept calls made.This is so as to ensure that the de-allocation of the Send_Message_Table and the Received_Message_Table, send_buf and recv_buf and cancelling of threads is done only once for each accept call. [ the last my_close(sockfd) does not perform any de-allocation or thread cancellation]

	6.		Name:         connect_flag
			Definition:	  int connect_flag;
			Description:  A flag to keep track of whether the connect call has been made or not.This is so that at the time of my_close(sockfd) we can check if the connect call has been made or not [ and distinguish it from the my_close (sockfd) on the server side after the last accept call ] and accordingly perform the de-allocation of the Send_Message_Table and the Received_Message_Table, send_buf and recv_buf and cancelling of threads.
	
	7.		Name:		  tid_R
			Definition:	  pthread_t tid_R;
			Description:  The thread id of the R thread.

	8.		Name:		  tid_S
			Definition:	  pthread_t tid_S;
			Description:  The thread id of the S thread.


DATA STRUCTURES USED:
    1.		Name:	      table_entry
			Definition:	  typedef struct table_entry
							{
								char msg[MAX_MSG_LEN];
								char msg_len[MAX_MSG_DIGITS + 1];
								time_t timestamp;
								struct table_entry *next;
							} table_entry;

			Type:		  struct
			Description:  A structure to store the message, the length of the message, the timestamp [ when the entry in the table was created ] and the pointer to the next entry in the table.  

	
	2.		Name:	      Table
			Definition:	  typedef struct Table
							{
								table_entry *head;
								table_entry *tail;
								pthread_mutex_t table_lck;
								pthread_cond_t table_full_cond;
								pthread_cond_t table_empty_cond;
								size_t table_sz;

							} Table;

			Type:		  struct
			Description:  The Table themselves have been implemented as a linked list with pointers to the head and tail of the linked list. The operations allowed on this linked list are push from back and pop from front [ same as in a Queue ]. This is to enable FIFO order of delivery of messages to the application. The table_lck is a mutex lock to ensure that only one thread can access that table at a time. The table_full_cond and table_empty_cond are condition variables to wait on when the table is full and when the table is empty respectively.We used pthread_cond_wait to wait efficiently instead of sleeping [ for which we need these conditional variables ]. The table_sz is the current size of the table.

FUNCTIONS USED:

	1.int my_socket (int sockfd, int domain, int type, int protocol):

		- The socket descriptor is stored in the sockfd variable.
		- The domain, type and protocol are the same as the ones used in the socket() system call.
		- This function creates a socket of the specified type and returns the socket descriptor.
		- The only allowed type is SOCK_MyTCP, any other type will result in a return value of -1 [failure] and errno set to EINVAL
		- The function returns 0 on success and -1 on failure.

	2.int my_bind (int sockfd, const struct sockaddr *addr, socklen_t addrlen):

		- The sockfd is the socket descriptor returned by the my_socket() function.
		- The addr is the address to which the socket is to be bound.
		- The addrlen is the length of the address.
		- This function binds the socket to the specified address.
		- The function returns 0 on success and -1 on failure.

	3.int my_listen (int sockfd, int backlog):

		- The sockfd is the socket descriptor returned by the my_socket() function.
		- The backlog is the maximum number of pending connections that can be queued.
		- This function puts the socket in the listening state.
		- The function returns 0 on success and -1 on failure.

	4.int my_accept (int sockfd, struct sockaddr *addr, socklen_t *addrlen):

		- The sockfd is the socket descriptor returned by the my_socket() function.
		- The addr is the address of the connecting client.
		- The addrlen is the length of the address.
		- This function accepts a connection on the socket.
		- If failure function returns immediately with a return value of -1.
		- If success function initialises the Send_Message_Table and the Received_Message_Table, allocates memory dynamically for send_buf and recv_buf character pointers, creates the threads [ passing the newsockfd as the parameter ], increases the accept_cnt by 1 and returns a new socket descriptor on which the actual connection is made.

	5.int my_connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen)

		- The sockfd is the socket descriptor returned by the my_socket() function.
		- The addr is the address to which the socket is to be connected.
		- The addrlen is the length of the address.
		- This function connects the socket to the specified address.
		- If failure function returns immediately with a return value of -1.
		- If success function initialises the Send_Message_Table and the Received_Message_Table, allocates memory dynamically for send_buf and recv_buf character pointers, creates the threads [ passing the sockfd as the parameter ], sets the connect_flag to 1 and returns 0.

	6.int my_send(int sockfd, const void *buf, size_t len, int flags)

		- The sockfd is the socket descriptor returned by the my_socket()/my_accept function.
		- The buf is the buffer containing the message to be sent.
		- The len is the length of the message.
		- It first checks if flag is anything other than 0 or message size to send is greater than max message length and sets errorno accordingly and prints to stderr,returning -1 [ failure ].
		- This function pushes the message to send into the send table [ It first acquires the lock to the Send_Message_Table, then checks if the table is full, if it is full it waits on the table_full_cond, else pushes the message into the table, signals the table_empty_cond and releases the lock to the Send_Message_Table]
		- If success function pushes the message into the Send_Message_Table and returns the number of bytes of the message [ returns len itself ].
		- Can return success even if send() fails later [ ignored such issues ].

	7.int my_recv(int sockfd, void *buf, size_t len, int flags)

		- The sockfd is the socket descriptor returned by the my_socket()/my_accept() function.
		- The buf is the buffer to which the message is to be copied.
		- The len is the length of the message.
		- It first checks if flag is anything other than 0 and sets errorno accordingly and prints to stderr,returning -1 [ failure ].
		- This function pops the message to receive from the receive table [ It first acquires the lock to the Received_Message_Table, then checks if the table is empty, if it is empty it waits on the table_empty_cond, else pops the message from the table, signals the table_full_cond and releases the lock to the Received_Message_Table ]
		- If success, returns the number of bytes that had to be read [ returns len itself ].

	8.int my_close (int sockfd)

		- The sockfd is the socket descriptor returned by the my_accept/my_socket() function.
		- This function checks if accept_cnt is 0 or connect_flag not set,and immediately closes socket without de-allocation of any data structures, since this must be the last close(sockfd) call on a server socket [ not the newsockfd returned by accept() ,and since our logic initialises tables and creates thread only on accept call, it is destroyed already by the corresponding my_close (newsockfd) call ]
		- If accept_cnt is not 0 or connect_flag is set, it cancels the thread synchronously using 'pthread_cancel()' [ uses deferred cancellation, and recv() and send() are default cancellation points for the send() and recv() calls, so an ongoing send()/recv() call will be allowed but subsequent send()/recv() call will lead to cancellation of thread. So,it doesn't guarantee 100% reliability, sleep(<seconds>) solves the issue but my_close() doesn't return immediately ], de-allocates the memory allocated for the send_buf and recv_buf character pointers, uninitialises the Send_Message_Table and the Received_Message_Table, and closes the socket.
		- The function returns 0 on success and -1 on failure

	9.void *send_thread(void *param)

		- Thread to handle send calls
		- The param is a pointer to the socket descriptor, passed as a parameter to the thread on creation [ in my_accept() or my_connect() ]
		- This function pops the message to send from the send table [ It first acquires the lock to the Send_Message_Table, then checks if the table is empty, if it is empty it waits on the table_empty_cond, else pops the message from the table, signals the table_full_cond and releases the lock to the Send_Message_Table ] and sends it to the client using multiple send calls if needed [ one send call send atmost 1000 bytes ] and max 6 send calls possible [ since a message is of max(4 bytes for length of message in ascii characters and one null character at end) + 1(space for separating from actual message) + 5000(actual message) = 5006 bytes ]


	10.void *recv_thread(void *param)

		- Thread to handle recv calls
		- The param is a pointer to the socket descriptor, passed as a parameter to the thread on creation [ in my_accept() or my_connect() ]
		- It extracts the length of the message from the first few bytes, then reads that many bytes of message, filling the required fields in Receive_Message_Table entry appropriately.
		- This function receives the message from the client using multiple recv calls if needed [ one recv call recv atmost <RECV_BUF_SZ> bytes ] and pushes the message into the receive table [ It first acquires the lock to the Received_Message_Table, then checks if the table is full, if it is full it waits on the table_full_cond, else pushes the message into the table, signals the table_empty_cond and releases the lock to the Received_Message_Table ]
		- If nothing to receive, blocked indefinitely until thread cancelled.

	11.void create_threads(int sockfd)

		- The sockfd is the socket descriptor returned by the my_accept/my_connect() function.
		- Performs the task of actually initialising tables and allocating memory to send_buf and recv_buf and creates the threads
		- Called by my_accept()/my_connect()

	12.void queue_push(Table *Tble, table_entry *entry)

		- Pushes a table entry specified in parameter to the Table [ A linked list of table entries ] from back
		- Updates size of table

	13.table_entry *queue_pop(Table *Tble)

		- Pops a table entry from the front of the list
		- Updates size of table
		- Returns the table entry at the front of the list

	14.void initialise_table(Table **Tbl)

		- It allocates memory a the Table structure 
		- It initialises the size of the table to 0	
		- It initialises the head and tail of the table to NULL
		- It initialises the mutex and condition variables of the table
		- It then copies the table to the content of pointer to the table passed as a parameter and frees the memory allocated for the table

	15.void uninitialise(Table **Tbl)

		- It first copies the content of the pointer to the table to a local variable
		- It then frees all the table entries
		- It then destorys the mutex and condition variables
		- It sets table size to 0
		- It then frees the memory allocated for the table.


WORKFLOW:
	(1) my_send():

			Suppose program wants to send a string x.Suppose len(x) represents the number of characters to send.
			The program writes my_send(sockfd,x,len(x),0) to send the string x.
			my_send() first performs error checks,it checks if len(x) is greater than MAX_MSG_LEN,throws an error [ ENOMEM ] and returns -1,or if flags is anything other than 0,throws an error [ EINVAL ] and returns -1.
			If no error,it allocates space for a table entry.
			It then copies the message to be sent [ len(x) characters of it ] to table_entry->msg character array.
			It then converts the length of the message to be sent to ascii characters and stores it in table_entry->msg_len character array. [ null terminated ]
			It fills the timestamp field of the message in table_entry->timestamp.
			It then tries to acquire the lock on the Send_Message_Table
			If it is able to, it checks if the table is full,if it is full, it waits on the table_full_cond,else it pushes the table_entry [at the END of the Table ] into the table,signals the table_empty_cond and releases the lock on the Send_Message_Table.
			It then returns the length of the message sent. [ len(x) itself ]                                                                                             
			
			
			In send_thread():

			It tries to acquire the lock on the Send_Message_Table
			If it is able to, it checks if the table is empty,if it is empty, it waits on the table_empty_cond,else it pops the table_entry from the table [ from the START of the Table ],signals the table_full_cond and releases the lock on the Send_Message_Table.
			It now constructs the message to send in appropriate format.
			The format the message is sent is <Length of message in ascii characters [terminated with null]><space><message with length characters>
			It then sends the message to the client using multiple send calls if needed [ one send call send atmost 1000 bytes ] and max 6 send calls possible [ since a message is of max (4 bytes for length of message in ascii characters and one null character at end) + 1(space for separating from actual message) + 5000(actual message) = 5006 bytes ]

			It then waits on the next entry in the table to be filled by the my_send() call. [ if already field proceeds immediately after acquiring lock and sends it ]

			This method ensures whichever message is to be sent first, is sent actually in a FIFO order in the send thread. [ as the pop and push functions are the implementations of the queue pop and push functions ]

			[ The send thread is created in my_accept() or my_connect() function, and is cancelled in my_close() functi on ]

	(2) my_recv():

			Suppose program wants to receive a string in x.Suppose len(x) represents the number of characters to receive.
			The program writes my_recv(sockfd,x,len(x),0) to receive the string in x.
			my_recv() first performs error checks,if flags is anything other than 0,throws an error [ EINVAL ] and returns -1.
			If no error,it allocates space for a table entry.
			It then tries to acquire the lock on the Received_Message_Table
			If it is able to, it checks if the table is empty,if it is empty, it waits on the table_empty_cond,else it pops the table_entry from the table [ from the START of the Table ],signals the table_full_cond and releases the lock on the Received_Message_Table.
			It then copies the message received [ min(len(x),length of message in entry) characters of the message and rest filled with '\0' uptil len(x) characters filled ] to the character array x specified in the parameter.
			It then returns the length of the message received. [ len(x) itself ]                                                                                             
			
			
			In recv_thread():

			It allocates memory for a table entry.
			It then tries to receive the message from the other side using recv()
			It makes multiple recv calls if needed [ one recv call recv atmost <RECV_BUF_SZ> bytes ].
			It then parses the message received ,fills the entry->msg_len field until it finds a space [either in one recv call or until multiple recv calls]
			One it has found the length [ found a space ],it sets a got_len flag to be true and then reads the required number of characters from the subsequent recv calls and pushes into the entry->msg character array.
			It fills the timestamp field of the message in table_entry->timestamp.
			It then tries to acquire the lock on the Received_Message_Table
			If it is able to, it checks if the table is full,if it is full, it waits on the table_full_cond,else it pushes the table_entry [at the END of the Table ] into the table,signals the table_empty_cond and releases the lock on the Received_Message_Table.

			It then tries to recv the next message [ or gets blocked if nothing is to be received then ]

			This method ensures whichever message is to be received first, is received actually in a FIFO order in the receive thread. [ as the pop and push functions are the implementations of the queue pop and push functions ]

			[ The receive thread is created in my_accept() or my_connect() function, and is cancelled in my_close() function ]


---------------------------------------------------------------END------------------------------------------------------------------------------------------------------------------------------